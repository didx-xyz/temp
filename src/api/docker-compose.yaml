version: "3.3"
services:
  sqlserver: # Local MSSQL server
    image: ghcr.io/didx-xyz/mssql-server:2022-fts
    container_name: sqlserver
    restart: always
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: "Password1"
    ports:
      - "0.0.0.0:1433:1433"
    volumes:
      - sqlserver:/var/opt/mssql
    healthcheck:
      test:
        [
          "CMD",
          "/opt/mssql-tools/bin/sqlcmd",
          "-U",
          "SA",
          "-P",
          "Password1",
          "-Q",
          "SELECT 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 9
      start_period: 30s

  sqlserver-init: # Initialise the local MSSQL server by populating a test user and organisation(s) for local dev
    image: ${REGISTRY:-local}/sqlserver-init:${IMAGE_TAG:-latest}
    container_name: sqlserver-init
    entrypoint: ["/post.sh"]
    command: ["sqlserver", "sa", "post.sql"]
    build:
      context: .
      dockerfile: ./cicd/dockerfiles/Dockerfile.sqlserver-init
    restart: "no"
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: "Password1"
      SQLCMDPASSWORD: "Password1"
    volumes:
      - ./cicd/scripts/sqlserver-init/post.sql:/post.sql
    depends_on:
      yoma-api-core-health:
        condition: service_completed_successfully

  keycloak-init: # Initialise the local Keycloak server by adding the bcrypt & webhook provider
    image: alpine/curl:3.14
    container_name: keycloak-init
    command: |
      sh -c 'curl -L https://github.com/vymalo/keycloak-webhook/releases/download/v0.2.0/keycloak-webhook-0.2.0-all.jar \
      -o /opt/keycloak/providers/keycloak-webhook-0.2.0.jar && \
      chown 1000:1000 /opt/keycloak/providers/keycloak-webhook-0.2.0.jar'
    volumes:
      - keycloak:/opt/keycloak/providers

  db:
    image: postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 10s
      timeout: 5s
      retries: 3

  keycloak: # Local Keycloak server
    image: quay.io/keycloak/keycloak:21.1.2
    container_name: keycloak
    environment:
      WEBHOOK_EVENTS_TAKEN: "LOGIN,REGISTER,LOGOUT,UPDATE_PROFILE"
      WEBHOOK_HTTP_BASE_PATH: "http://yoma-api-core:5000/api/v1/keycloak"
      WEBHOOK_HTTP_AUTH_USERNAME: whAdmin
      WEBHOOK_HTTP_AUTH_PASSWORD: password
      KC_DB_URL: jdbc:postgresql://db/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HEALTH_ENABLED: true
      KC_HOSTNAME: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - 0.0.0.0:8080:8080
    command: ["start-dev", "--db=postgres", "--features=declarative-user-profile"]
    depends_on:
      keycloak-init:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    volumes:
      - keycloak:/opt/keycloak/providers
      - ./cicd/themes:/opt/keycloak/themes

  keycloak-health: # Wait for Keycloak to be ready before running keycloak-config service
    image: curlimages/curl
    container_name: keycloak-health
    restart: "no"
    command: /bin/sh -c "until curl -fsS http://keycloak:8080/health/ready; do sleep 5; done"
    depends_on:
      keycloak:
        condition: service_started

  keycloak-config: # Import Keycloak configuration
    image: adorsys/keycloak-config-cli:5.6.1-21.0.1
    environment:
      KEYCLOAK_URL: "http://keycloak:8080/"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
      KEYCLOAK_AVAILABILITYCHECK_ENABLED: "true"
      KEYCLOAK_AVAILABILITYCHECK_TIMEOUT: "120s"
      IMPORT_FILES: "/config/*"
      IMPORT_VALIDATE: "true"
      LOGGING_LEVEL_ROOT: "INFO"
      IMPORT_VAR_SUBSTITUTION_ENABLED: "true"
      # Templating variables
      WEBAPP_URL: "http://localhost:3000"
      API_URL: "http://localhost:5000"
    volumes:
      - ./cicd/scripts/keycloak:/config
    depends_on:
      keycloak-health:
        condition: service_completed_successfully

  yoma-api-core: # Local Yoma API Core server
    image: ${REGISTRY:-local}/yoma-api-core:${IMAGE_TAG:-latest}
    container_name: yoma-api-core
    build:
      context: .
      dockerfile: ./cicd/dockerfiles/Dockerfile.yoma-api-core
    environment:
      ASPNETCORE_ENVIRONMENT: Local
      ASPNETCORE_URLS: "http://+:5000"
      ConnectionStrings__SQLConnection: "Data Source=sqlserver,1433;Initial Catalog=yoma-dev;MultipleActiveResultSets=true;User ID=sa;Password=Password1;;TrustServerCertificate=True;Encrypt=False"
      Logging__LogLevel__Default: "Debug"
      Logging__LogLevel__Microsoft: "Debug"
      Logging__LogLevel__Microsoft.Hosting.Lifetime: "Information"
      Logging__LogLevel__Microsoft.EntityFrameworkCore: "Error"
      AllowedOrigins: "http://localhost:5000;http://localhost:3000" # can be set to wildcard * to allow all hosts
    ports:
      - "0.0.0.0:5000:5000"
    volumes:
      - yoma:/root/.aspnet/DataProtection-Keys
      # - ./YomaApiCore/appsettings.Local.json:/api/appsettings.Local.json
    depends_on:
      sqlserver:
        condition: service_healthy

  yoma-api-core-health: # Wait for Yoma API Core to be ready. Dependency for sqlserver-init.
    image: curlimages/curl
    container_name: yoma-api-core-health
    restart: "no"
    command: /bin/sh -c "until curl -fsS http://yoma-api-core:5000/index.html; do sleep 5; done"
    depends_on:
      yoma-api-core:
        condition: service_started

  test-harness-health: # Wait for sqlserver-init to be finished.
    image: curlimages/curl
    container_name: test-harness-health
    restart: "no"
    command: /bin/sh -c "until curl -fsS http://yoma-api-core:5000/index.html; do sleep 5; done"
    depends_on:
      sqlserver-init:
        condition: service_completed_successfully

volumes:
  sqlserver:
  yoma:
  keycloak:
  postgres:
